function matrix wooldridge_test_serial (series y "Dependent variable",
                                        list X "List of regressors",
                                        const int robustness_type[0:2:1] "Std. Errors" {"Asymptotic", "HAC robust", "Clustered"},
                                        const bool verbose[1] "Print details")
    /* Wooldridge test for autocorrelation in panel data
       Wooldridge (2002) Econometric Analysis of Cross Section and
       Panel Data, pp.282-283;
       Artur Tarassow and Giuseppe Vittucci Marzetti.*/

    # Build series
    series dy = diff(y)
    series_is_null(dy)
    list dX = get_list_of_differenced_series(X)

    # FD regression
    bundle b = null
    b = run_wooldridge_ols(dy, dX, robustness_type, verbose)
    series u = b.uhat
    print_first_diff_reg(argname(y), b.xlist_names, b.coeff~b.stderr, robustness_type, verbose)

    # Run actual auxiliary regression
    if verbose
        printf "\nRegression of residuals of the first-differenced equation on lagged residuals:\n"
        printf "uhat = rho*uhat(-1) + e\n"
    endif
    bundle b = null
    list u_1 = u(-1)
    b = run_wooldridge_ols(u, u_1, robustness_type, verbose)

    # Inference
    matrix results = run_wooldridge_t_test(b.coeff, b.stderr, b.df)
    tstat = results[1]
    pval = results[2]

    print_wooldridge_test_results(b.df, tstat, pval, b.coeff, b.stderr, robustness_type, verbose)

    mat = b.coeff~tstat~pval
    cnameset(mat, "ARcoeff Teststat. P-value")

    return mat
end function


function void gui_wooldridge_test_serial (void)
    /* Wrapper function for gui menu-entry */
    string yname = $model.depvar
    series yseries = $model.ylist[1]
    matrix mat = wooldridge_test_serial(yseries, $model.xlist, 1)	# HAC SE
end function


function bundle run_wooldridge_ols (const series y, const list L, const int robustness_type,
                                    const bool verbose)
    /* Estimate regression by OLS and retrieve various model information */

    bundle b = null
    string str_quiet = (verbose == 1) ? "" : "--quiet"
    string str_robustness = (robustness_type > 0) ? "--robust" : ""

    # Set type of VCV correction
    if robustness_type==1				# HAC type Arellano estimator
        set pcse off
    elif robustness_type==2				# Beck & Katz Panel Corrected Standard Errors (HC type)
        set pcse on
    endif

    ols y L @str_robustness @str_quiet

    string b.xlist_names = varname($xlist)
    series b.uhat = $uhat
    matrix b.coeff = $coeff
    matrix b.stderr = $stderr
    scalar b.ncoeff = nelem($xlist)
    scalar b.T = $T
    matrix b.vcv = $vcv
    scalar b.df = $df
    string b.str_robustness = str_robustness

    return b
end function


function matrix run_wooldridge_t_test (const scalar coeff, const scalar stderr, const int df)
    /* Run 2-sided t-test on H0: b=-0.5 */

    matrix results = zeros(2,1)
    results[1] = (coeff + 0.5) / stderr
    results[2] = 2*pvalue(t, df, results[1])
    rnameset(results, "tstat pvalue")

    return results
end function


function list get_list_of_differenced_series (const list L)
    /* Helper function for differencing series */

    list dL = null
    loop foreach i L -q
        series d$i = diff(L.$i)
        list dL += d$i
    endloop

    return dL
end function


function string get_stderr_type_string (const int robustness_type)
    if robustness_type==0
        return "With asymptotic standard errors."
    elif robustness_type==1
        return "With HAC robust Arellano standard errors."
    elif robustness_type==2
        return "With Beck & Katz panel corrected HC robust standard errors."
    endif
end function


function void print_wooldridge_test_results (const int df, const scalar tstat, const scalar pval,
                                             const matrix coeff, const matrix stderr,
                                             const int robustness_type, const bool verbose)
    /* Helper function for printing test results */
    if verbose
        matrix mat = coeff ~ stderr
        string parnames = "uhat(-1)"
        modprint mat parnames
        printf "\nWooldridge t-test for autocorrelation in panel data.\n"
        printf "H0: no first-order autocorrelation (rho = -0.5):\n"
        printf "%s\n", get_stderr_type_string(robustness_type)
        printf "Test statistic: t(%d) = %g\n", df, tstat
        printf "with p-value = P(t(%d) > %g) = %g\n", df, tstat, pval
    endif
end function


function void series_is_null (const series y)
    scalar ret = sum(abs(y))
    if ret==0
        string vname = argname(y)
    	funcerr "Error: The first difference of series @vname comprises only zero entries."
    endif
end function


function void print_first_diff_reg (const string name_y, const string parnames, const matrix coef_stde,
                                    const int robustness_type, const bool verbose)
    /* Helper function for printing results of initial 1st difference regression */
    
    if verbose
        printf "\nFirst-Differenced equation (dependent d_%s):\n", name_y
        printf "%s\n", get_stderr_type_string(robustness_type)
        modprint coef_stde parnames
    endif
end function
